package util;
import java.sql.*;
import java.util.*;

import util.PageBean;
public class DBUtil{
	private Connection conn=null;
	private PreparedStatement pstmt=null;
	private ResultSet rs=null;
	private String url="jdbc:MySQL://localhost:3306/xiaoma_net";
	private int pageSize=3;
	private Connection getConnection(){
		try{
			Class.forName("com.mysql.jdbc.Driver");
			conn=DriverManager.getConnection(url,"root","xiaoma96");
		}catch(ClassNotFoundException e){
			e.printStackTrace();
		}catch(SQLException e){
			e.printStackTrace();
		}
		return conn;
	}
	private PreparedStatement getPreparedStatement(String sql){
		try{
			pstmt=getConnection().prepareStatement(sql);
		}catch(SQLException e){
			e.printStackTrace();
		}
		return pstmt;
	}
	//给pstmt的SQL语句设置参数（要求参数以数组形式给出)
	private void setParams(String sql,Object[] params){
		pstmt=this.getPreparedStatement(sql);
		for(int i=0;i<params.length;i++){
			try{
				pstmt.setString(i+1,(String) params[i]);	
			}catch(SQLException e){
				e.printStackTrace();
			}
		}
	}
	//执行数据库查询操作时，返回结果的记录总数
	private int getToalRows(String sql,Object[] params){
		int totalRows=0;
		String countSql="select count(*) from ("+sql+")as temp";
		try{
			this.setParams(countSql,params);
			ResultSet rs=pstmt.executeQuery();
			if(rs.next())
				totalRows=rs.getInt(1);
		}catch(SQLException e){
			e.printStackTrace();
		}finally{
			close();
		}
		return totalRows;
	}
	//执行数据库查询操作时,将返回的结果封装到List对象中
	@SuppressWarnings({ "rawtypes", "unused", "unchecked" })
	public List getList(String sql,Object[] params){
		List list=new ArrayList();
		try{
			this.setParams(sql,params);
			ResultSet rs=pstmt.executeQuery();
			System.out.println("查询返回的结果为"+rs);
			ResultSetMetaData rsmd=rs.getMetaData();
			System.out.println("返回表的列数："+rsmd.getColumnCount());
			while(rs.next()){
				Map m=new HashMap();
				for(int i=1;i<=rsmd.getColumnCount();i++){ //别忽视了 = 号，我擦嘞。这个=号害死人
					String colName=rsmd.getColumnName(i);
					System.out.println("返回表的列名："+colName);
					int type=rsmd.getColumnType(i);
					System.out.println("type的值："+type);
					m.put(colName,rs.getString(colName));
				}
				list.add(m);
			}
		}catch(SQLException e){
			e.printStackTrace();
		}finally{
			close();
		}
		return list;
	}
	//执行数据库查询操作时，将返回的结果封装到Map对象中
	@SuppressWarnings("rawtypes")
	public Map getMap(String sql,Object[] params){
		List list=getList(sql,params);
		if(list.isEmpty())
			return null;
		else
			return(Map)list.get(0);
	}
	//分页显示查询结果时，将当前页中的所有信息封装到PageBean中
	public PageBean getPageBean(String sql,Object[] params,int curPage){
		String newSql=sql+" limit "+(curPage-1)*pageSize+","+pageSize;//deslimit-3,3
		@SuppressWarnings("rawtypes")
		List data=this.getList(newSql,params);
		PageBean pb=new PageBean();
		pb.setCurPage(curPage);
		pb.setPageSize(pageSize);
		pb.setTotalRows(getToalRows(sql,params));
		pb.setData(data);
		System.out.println(data);
		System.out.println(newSql);
		return pb;
	}
	//更新数据库时调用update（）方法
	public int update(String sql,Object[]params){
		int recNo=0; //表示受影响的记录总行
		try{
			setParams(sql,params);//根据SQL语句和params设置pstmt对象
			recNo=pstmt.executeUpdate();//执行更新操作
		}catch(Exception e){
			System.out.println("添加出错！");
			e.printStackTrace();
		}finally{
			close();
		}
		return recNo;
	}
	//关闭对象
	private void close(){
		try{
			if(rs!=null)
				rs.close();
			if(pstmt!=null)
				pstmt.close();
			if(conn!=null)
				conn.close();
		}catch(SQLException e){
			
		}
	}
}